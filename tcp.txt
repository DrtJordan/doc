tcp建立连接三次握手
客户端 ->syn,seq=x                   服务器
                syn,seq=y,ack=x+1 <-
           ->ack=y+1
           
 发送数据
         ->     push,seq=x:x+n      
                  ack =x+n                         <-
                  push,seq=y:y+n             <-
				->      ack=y+n
		  	->     push,seq=x+n:x+m      
                  ack =x+m                         <-
如果发送大数据包，就会被拆分成多个包，接收方收到一部分ack一部分
 19:56:11.007662 IP 127.0.0.1.55258 > 127.0.0.1.3333: Flags [P.], seq 24:8216, ack 24, win 9185, options [nop,nop,TS val 317942582 ecr 317942581], length 8192
19:56:11.007678 IP 127.0.0.1.3333 > 127.0.0.1.55258: Flags [.], ack 8216, win 8673, options [nop,nop,TS val 317942582 ecr 317942582], length 0
19:56:11.007717 IP 127.0.0.1.55258 > 127.0.0.1.3333: Flags [P.], seq 8216:9073, ack 24, win 9185, options [nop,nop,TS val 317942582 ecr 317942582], length 857
19:56:11.007746 IP 127.0.0.1.3333 > 127.0.0.1.55258: Flags [.], ack 9073, win 8619, options [nop,nop,TS val 317942582 ecr 317942582], length 0
19:56:11.008928 IP 127.0.0.1.3333 > 127.0.0.1.55258: Flags [P.], seq 24:8216, ack 9073, win 8619, options [nop,nop,TS val 317942583 ecr 317942582], length 8192
19:56:11.008960 IP 127.0.0.1.55258 > 127.0.0.1.3333: Flags [.], ack 8216, win 8673, options [nop,nop,TS val 317942583 ecr 317942583], length 0
19:56:11.008969 IP 127.0.0.1.3333 > 127.0.0.1.55258: Flags [P.], seq 8216:9073, ack 9073, win 8619, options [nop,nop,TS val 317942583 ecr 317942583], length 857
19:56:11.008979 IP 127.0.0.1.55258 > 127.0.0.1.3333: Flags [.], ack 9073, win 8619, options [nop,nop,TS val 317942583 ecr 317942583], length 0

    
  关闭
客户端 ->fin,seq=x                   服务器
                ack=x+1                   <-
           ->ack 上次发送数据的位置
                fin,seq=y,ack=x+1  <-
           ->ack=y+1
   
   [S]代表syn [.]代表ACK [P] push [F] 
  ACK，确认序号标志位，关于ACK有几点需要注意：a) ACK是累积的，表示接收方已经正确收到了一直到确认序号减一的所有字节；b) TCP通常并不会对每个数据包进行确认，而是采用了捎带确认和延迟确认的技术，捎带确认是指将ACK报文合并到数据报文中去，而延迟确认是TCP维持了一个200ms的定时器，在定时器过期前，若有多个数据需要确认，则一块进行确认，通常是两个报文确认一次，若200ms到了，仍没有新数据需要确认，则不再等待，直接确认该报文；c) ACK报文本身并不会被确认，当ACK丢失时，需要依靠对端超时机制发现（后文详述）。
PSH，该标志由TCP自动设置（曾经允许通过接口进行设置，当前多数实现不提供），多数实现在发送者将清空发送缓冲区时设置该标志，即发送者一次将当前发送缓冲区的数据都发送出去了。
RST，连接重置标志位。
SYN，同步标志位，用来发起一个新建连接。
FIN，发送端已经完成了所有的数据发送，不会再发送新的数据，关闭了其发送端，若对端也发送该标志，则完全关闭连接。

关于建连接时SYN超时。试想一下，如果server端接到了clien发的SYN后回了SYN-ACK后client掉线了，server端没有收到client回来的ACK，
那么，这个连接处于一个中间状态，即没成功，也没失败。于是，server端如果在一定时间内没有收到的TCP会重发SYN-ACK。在Linux下，
默认重试次数为5次，重试的间隔时间从1s开始每次都翻售，5次的重试时间间隔为1s, 2s, 4s, 8s, 16s，总共31s，
第5次发出后还要等32s都知道第5次也超时了，所以，总共需要 1s + 2s + 4s+ 8s+ 16s + 32s = 2^6 -1 = 63s，TCP才会把断开这个连接。
关于SYN Flood攻击。一些恶意的人就为此制造了SYN Flood攻击——给服务器发了一个SYN后，就下线了，于是服务器需要默认等63s才会断开连接，这样，攻击者就可以把服务器的syn连接的队列耗尽，让正常的连接请求不能处理。于是，Linux下给了一个叫tcp_syncookies的参数来应对这个事——当SYN队列满了后，TCP会通过源地址端口、目标地址端口和时间戳打造出一个特别的Sequence Number发回去（又叫cookie），如果是攻击者则不会有响应，如果是正常连接，则会把这个 SYN Cookie发回来，然后服务端可以通过cookie建连接（即使你不在SYN队列中）。请注意，请先千万别用tcp_syncookies来处理正常的大负载的连接的情况。因为，synccookies是妥协版的TCP协议，并不严谨。对于正常的请求，你应该调整三个TCP参数可供你选择，第一个是：tcp_synack_retries 可以用他来减少重试次数；第二个是：tcp_max_syn_backlog，可以增大SYN连接数；第三个是：tcp_abort_on_overflow 处理不过来干脆就直接拒绝连接了。

SeqNum的增加是和传输的字节数相关的。上图中，三次握手后，来了两个Len:1440的包，而第二个包的SeqNum就成了1441。然后第一个ACK回的是1441，表示第一个1440收到了。
SeqNum和Ack是以字节数为单位，所以ack的时候，不能跳着确认，只能确认最大的连续收到的包
于是，TCP引入了一种叫Fast Retransmit的算法，不以时间驱动，而以数据驱动重传。也就是说，如果，包没有连续到达，就ack最后那个可能被丢了的包，如果发送方连续收到3次相同的ack，就重传。Fast Retransmit的好处是不用等timeout了再重传。

比如：如果发送方发出了1，2，3，4，5份数据，第一份先到送了，于是就ack回2，结果2因为某些原因没收到，3到达了，于是还是ack回2，后面的4和5都到了，
但是还是ack回2，因为2还是没有收到，于是发送端收到了三个ack=2的确认，知道了2还没有到，于是就马上重转2。然后，接收端收到了2，此时因为3，4，5都收到了，于是ack回6。示意图如下：
另外一种更好的方式叫：Selective Acknowledgment (SACK)（参看RFC 2018），这种方式需要在TCP头里加一个SACK的东西
TCP头里有一个字段叫Window，又叫Advertised-Window，这个字段是接收端告诉发送端自己还有多少缓冲区可以接收数据。于是发送端就可以根据这个接收端的处理能力来发送数据，而不会导致接收端处理不过来
我们可以看到一个处理缓慢的Server（接收端）是怎么把Client（发送端）的TCP Sliding Window给降成0的。此时，你一定会问，如果Window变成0了，TCP会怎么样？是不是发送端就不发数据了？是的，发送端就不发数据了，你可以想像成“Window Closed”，那你一定还会问，如果发送端不发数据了，接收方一会儿Window size 可用了，怎么通知发送端呢？

解决这个问题，TCP使用了Zero Window Probe技术，缩写为ZWP，也就是说，发送端在窗口变成0后，会发ZWP的包给接收方，
让接收方来ack他的Window尺寸，一般这个值会设置成3次，第次大约30-60秒（不同的实现可能会不一样）。如果3次过后还是0的话，有的TCP实现就会发RST把链接断了。
只要有等待的地方都可能出现DDoS攻击，Zero Window也不例外，一些攻击者会在和HTTP建好链发完GET请求后，就把Window设置为0，然后服务端就只能等待进行ZWP，于是攻击者会并发大量的这样的请求，把服务器端的资源耗尽


另外，你需要知道网络上有个MTU，对于以太网来说，MTU是1500字节，除去TCP+IP头的40个字节，
真正的数据传输可以有1460，这就是所谓的MSS（Max Segment Size）注意，TCP的RFC定义这个MSS的默认值是536，
这是因为RFC 791里说了任何一个IP设备都得最少接收576尺寸的大小（实际上来说576是拨号的网络的MTU，而576减去IP头的20个字节就是536）
如果你的网络包可以塞满MTU，那么你可以用满整个带宽，如果不能，那么你就会浪费带宽。（大于MTU的包有两种结局，一种是直接被丢了，另一种是会被重新分块打包发送） 你可以想像成一个MTU就相当于一个飞机的最多可以装的人，如果这飞机里满载的话，带宽最高，如果一个飞机只运一个人的话，无疑成本增加了，也而相当二。

滑动窗用来做流量控制。流量控制只关注发送端和接受端自身的状况，而没有考虑整个网络的通信情况。拥塞控制，则是基于整个网络来考虑的。考虑一下这样的场景：某一时刻网络上的延时突然增加，那么，TCP对这个事做出的应对只有重传数据，但是，重传会导致网络的负担更重，于是会导致更大的延迟以及更多的丢包，于是，这个情况就会进入恶性循环被不断地放大。试想一下，如果一个网络内有成千上万的TCP连接都这么行事，那么马上就会形成“网络风暴”，TCP这个协议就会拖垮整个网络。为此，TCP引入了拥塞控制策略。拥塞策略算法主要包括：慢启动，拥塞避免，拥塞发生，快速恢复。 
 
22:24:00.364364 IP 127.0.0.1.53118 > 127.0.0.1.3333: Flags [S], seq 1989550259, win 65535, options [mss 16344,nop,wscale 4,nop,nop,TS val 314686066 ecr 0,sackOK,eol], length 0
.v. ..........4....?........
...r........
22:24:00.364418 IP 127.0.0.1.3333 > 127.0.0.1.53118: Flags [S.], seq 4103481312, ack 1989550260, win 65535, options [mss 16344,nop,wscale 4,nop,nop,TS val 314686066 ecr 314686066,sackOK,eol], length 0
..~..'.v. ......4....?........
...r...r....
22:24:00.364426 IP 127.0.0.1.53118 > 127.0.0.1.3333: Flags [.], ack 1, win 9186, options [nop,nop,TS val 314686066 ecr 314686066], length 0
.v. ...'...#..(......~
...r...r
22:24:00.364433 IP 127.0.0.1.3333 > 127.0.0.1.53118: Flags [.], ack 1, win 9186, options [nop,nop,TS val 314686066 ecr 314686066], length 0
..~..'.v. ...#..(.....
...r...r
22:24:00.366345 IP 127.0.0.1.53118 > 127.0.0.1.3333: Flags [P.], seq 1:24, ack 1, win 9186, options [nop,nop,TS val 314686068 ecr 314686066], length 23
.v. ...'...#..?......~
...t...rHello Server,I am Mike

22:24:00.366383 IP 127.0.0.1.3333 > 127.0.0.1.53118: Flags [.], ack 24, win 9185, options [nop,nop,TS val 314686068 ecr 314686068], length 0
..~..'.v. ...#..(.....
...t...t
22:24:00.366866 IP 127.0.0.1.3333 > 127.0.0.1.53118: Flags [P.], seq 1:24, ack 24, win 9185, options [nop,nop,TS val 314686068 ecr 314686068], length 23
..~..'.v. ...#..?.....
...t...tHello Server,I am Mike

22:24:00.366896 IP 127.0.0.1.53118 > 127.0.0.1.3333: Flags [.], ack 24, win 9185, options [nop,nop,TS val 314686068 ecr 314686068], length 0
.v. ...'...#..(......~
...t...t
22:24:10.516953 IP 127.0.0.1.53118 > 127.0.0.1.3333: Flags [P.], seq 24:42, ack 24, win 9185, options [nop,nop,TS val 314696187 ecr 314686068], length 18
.v. ...'...#..:......~
.......tthis is message 1

22:24:10.516970 IP 127.0.0.1.3333 > 127.0.0.1.53118: Flags [.], ack 42, win 9184, options [nop,nop,TS val 314696187 ecr 314696187], length 0
..~..'.v. ...#..(.....
........
22:24:10.517162 IP 127.0.0.1.3333 > 127.0.0.1.53118: Flags [P.], seq 24:42, ack 42, win 9184, options [nop,nop,TS val 314696187 ecr 314696187], length 18
..~..'.v. ...#..:.....
........this is message 1

22:24:10.517188 IP 127.0.0.1.53118 > 127.0.0.1.3333: Flags [.], ack 42, win 9184, options [nop,nop,TS val 314696187 ecr 314696187], length 0
.v. ...(@............~
..#..(.....
........
22:24:10.517436 IP 127.0.0.1.53118 > 127.0.0.1.3333: Flags [P.], seq 42:60, ack 42, win 9184, options [nop,nop,TS val 314696187 ecr 314696187], length 18
.v. ...(@............~
..#..:.....
........this is message 2

22:24:10.517458 IP 127.0.0.1.3333 > 127.0.0.1.53118: Flags [.], ack 60, win 9183, options [nop,nop,TS val 314696187 ecr 314696187], length 0
..~..(@.@...........
v. ...#..(.....
........
22:24:10.517591 IP 127.0.0.1.3333 > 127.0.0.1.53118: Flags [P.], seq 42:60, ack 60, win 9183, options [nop,nop,TS val 314696187 ecr 314696187], length 18
..~..(@.@...........
v. ...#..:.....
........this is message 2

22:24:10.517606 IP 127.0.0.1.53118 > 127.0.0.1.3333: Flags [.], ack 60, win 9183, options [nop,nop,TS val 314696187 ecr 314696187], length 0
.v. ...(...#..(......~
........
22:24:10.517688 IP 127.0.0.1.53118 > 127.0.0.1.3333: Flags [P.], seq 60:67, ack 60, win 9183, options [nop,nop,TS val 314696188 ecr 314696187], length 7
.v. ...(...#../......~
........byebye

22:24:10.517702 IP 127.0.0.1.3333 > 127.0.0.1.53118: Flags [.], ack 67, win 9182, options [nop,nop,TS val 314696188 ecr 314696188], length 0
..~..(.v. ...#..(.....
........
22:24:10.518041 IP 127.0.0.1.53118 > 127.0.0.1.3333: Flags [F.], seq 67, ack 60, win 9183, options [nop,nop,TS val 314696188 ecr 314696188], length 0
.v. ...(...#..(......~
........
22:24:10.518059 IP 127.0.0.1.3333 > 127.0.0.1.53118: Flags [.], ack 68, win 9182, options [nop,nop,TS val 314696188 ecr 314696188], length 0
..~..(.v. ...#..(.....
........
22:24:10.518066 IP 127.0.0.1.53118 > 127.0.0.1.3333: Flags [.], ack 60, win 9183, options [nop,nop,TS val 314696188 ecr 314696188], length 0
.v. ...(...#..(......~
........
22:24:10.518233 IP 127.0.0.1.3333 > 127.0.0.1.53118: Flags [F.], seq 60, ack 68, win 9182, options [nop,nop,TS val 314696188 ecr 314696188], length 0
..~..(.v. ...#..(.....
........
22:24:10.518252 IP 127.0.0.1.53118 > 127.0.0.1.3333: Flags [.], ack 61, win 9183, options [nop,nop,TS val 314696188 ecr 314696188], length 0
.v. ...(...#..(......~

   20:17:37.986117 IP 127.0.0.1.52282 > 127.0.0.1.8080: Flags [S], seq 2098119912, win 65535, options [mss 16344,nop,wscale 4,nop,nop,TS val 311208342 ecr 0,sackOK,eol], length 0
E..@G.@.@............:..}............4....?........
............
20:17:37.986186 IP 127.0.0.1.8080 > 127.0.0.1.52282: Flags [S.], seq 44990361, ack 2098119913, win 65535, options [mss 16344,nop,wscale 4,nop,nop,TS val 311208342 ecr 311208342,sackOK,eol], length 0
E..@..@.@..............:....}........4....?........
............
20:17:37.986198 IP 127.0.0.1.52282 > 127.0.0.1.8080: Flags [.], ack 1, win 9186, options [nop,nop,TS val 311208342 ecr 311208342], length 0
E..4..@.@............:..}.........#..(.....
........
20:17:37.986207 IP 127.0.0.1.8080 > 127.0.0.1.52282: Flags [.], ack 1, win 9186, options [nop,nop,TS val 311208342 ecr 311208342], length 0
E..4G.@.@..............:....}.....#..(.....
........
20:17:37.986295 IP 127.0.0.1.52282 > 127.0.0.1.8080: Flags [P.], seq 1:84, ack 1, win 9186, options [nop,nop,TS val 311208342 ecr 311208342], length 83
E.....@.@............:..}.........#..{.....
........GET /w.jsp HTTP/1.1
User-Agent: curl/7.30.0
Host: 127.0.0.1:8080
Accept: */*


20:17:37.986307 IP 127.0.0.1.8080 > 127.0.0.1.52282: Flags [.], ack 84, win 9181, options [nop,nop,TS val 311208342 ecr 311208342], length 0
E..4_.@.@..............:....}..<..#..(.....
........
20:17:37.987153 IP 127.0.0.1.8080 > 127.0.0.1.52282: Flags [P.], seq 1:197, ack 84, win 9181, options [nop,nop,TS val 311208343 ecr 311208342], length 196
E...6.@.@..............:....}..<..#........
........HTTP/1.1 200 OK
Server: Apache-Coyote/1.1
Set-Cookie: JSESSIONID=766B9B1BA07A86836D66DC74E669DF51; Path=/
Content-Type: text/html
Content-Length: 4
Date: Sat, 28 Feb 2015 12:17:37 GMT

HI


20:17:37.987172 IP 127.0.0.1.52282 > 127.0.0.1.8080: Flags [.], ack 197, win 9174, options [nop,nop,TS val 311208343 ecr 311208343], length 0
E..4.h@.@............:..}..<...^..#..(.....
........
20:17:37.987836 IP 127.0.0.1.52282 > 127.0.0.1.8080: Flags [F.], seq 84, ack 197, win 9174, options [nop,nop,TS val 311208343 ecr 311208343], length 0
E..4.v@.@............:..}..<...^..#..(.....
........
20:17:37.987872 IP 127.0.0.1.8080 > 127.0.0.1.52282: Flags [.], ack 85, win 9181, options [nop,nop,TS val 311208343 ecr 311208343], length 0
E..4-.@.@..............:...^}..=..#..(.....
........
20:17:37.987879 IP 127.0.0.1.52282 > 127.0.0.1.8080: Flags [.], ack 197, win 9174, options [nop,nop,TS val 311208343 ecr 311208343], length 0
E..4.I@.@............:..}..=...^..#..(.....
........
20:17:37.987966 IP 127.0.0.1.8080 > 127.0.0.1.52282: Flags [F.], seq 197, ack 85, win 9181, options [nop,nop,TS val 311208343 ecr 311208343], length 0
E..4..@.@..............:...^}..=..#..(.....
........
20:17:37.987987 IP 127.0.0.1.52282 > 127.0.0.1.8080: Flags [.], ack 198, win 9174, options [nop,nop,TS val 311208343 ecr 311208343], length 0
E..4.t@.@............:..}..=..._..#..(.....
........