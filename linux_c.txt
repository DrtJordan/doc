linux_c
理论上说，使用ELF格式的静态库函数生成的代码可以比使用共享函数库（或者动态函数 库）的程序运行速度上快一些，大概1－5％。

动态库*.so在linux下用c和c++编程时经常会碰到，最近在网站找了几篇文章介绍动态库的编译和链接，总算搞懂了这个之前一直不太了解得东东，这里做个笔记，也为其它正为动态库链接库而苦恼的兄弟们提供一点帮助。
1、动态库的编译

下面通过一个例子来介绍如何生成一个动态库。这里有一个头文件：so_test.h，三个.c文件：test_a.c、test_b.c、test_c.c，我们将这几个文件编译成一个动态库：libtest.so。

//so_test.h：
#include "stdio.h"
void test_a();
void test_b();
void test_c();

//test_a.c：
#include "so_test.h"
void test_a()
{
  printf("this is in test_a...\n");
}


//test_b.c：
#include "so_test.h"
void test_b()
{
  printf("this is in test_b...\n");
}



//test_c.c：
#include "so_test.h"
void test_c()
{
  printf("this is in test_c...\n");
}
将这几个文件编译成一个动态库：libtest.so
$ gcc test_a.c test_b.c test_c.c -fPIC -shared -o libtest.so

2、动态库的链接
在1、中，我们已经成功生成了一个自己的动态链接库libtest.so，下面我们通过一个程序来调用这个库里的函数。程序的源文件为：test.c。

test.c：
#include "so_test.h"
int main()
{
test_a();
test_b();
test_c();
return 0;
}
将test.c与动态库libtest.so链接生成执行文件test：
$ gcc test.c -L. -ltest -o test
测试是否动态连接，如果列出libtest.so，那么应该是连接正常了
$ ldd test
执行test，可以看到它是如何调用动态库中的函数的。
3、编译参数解析
最主要的是GCC命令行的一个选项:
-shared该选项指定生成动态连接库（让连接器生成T类型的导出符号表，有时候也生成弱连接W类型的导出符号），不用该标志外部程序无法连接。相当于一个可执行文件

-fPIC：表示编译为位置独立的代码，不用此选项的话编译后的代码是位置相关的所以动态载入时是通过代码拷贝的方式来满足不同进程的需要，而不能达到真正代码段共享的目的。

-L.：表示要连接的库在当前目录中

-ltest：编译器查找动态连接库时有隐含的命名规则，即在给出的名字前面加上lib，后面加上.so来确定库的名称

静态链接
gcc -c test_c.c 产生 test_c.o
建立 .a  把目标文档归档
ar -r libtest.a test_a.o test_b.o test_c.o

3.链接静态库
gcc test.c -L. -ltest -static -o testss
或者 gcc test.c libtest.a -L. -o main        


 -I dir参数，它是指头文件所在的目录。而添加库文件时需要 -L dir参数 -ltest 表示寻找 libtest.so 
 
 