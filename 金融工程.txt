Spark 支持R 

rJava是一个R语言和Java语言的通信接口，通过底层JNI实现调用，允许在R中直接调用Java的对象和方法。
rJava还提供了Java调用R的功能，是通过JRI(Java/R Interface)实现的。JRI现在已经被嵌入到rJava的包中，我们也可以单独试用这个功能。现在rJava包，已经成为很多基于Java开发R包的基础功能组件。
正式由于rJava是底层接口，并使用JNI作为接口调用，所以效率非常高。在JRI的方案中，JVM直接通过内存直接加载RVM，调用过程性能几乎无损耗，因此是非常高效连接通道，是R和Java通信的首选开发包。


R是非常流行的数据统计分析和制图的语言及环境，有一项调查显示，R语言在数据科学家中使用的程度仅次于SQL。但目前R语言的核心运行环境是单线程的，能处理的数据量受限于单机的内存容量，大数据时代的海量数据处理对R构成了挑战。
为了解决R的可伸缩性问题，R社区已经有一些方案，比如parallel和snow包，可以在计算机集群上并行运行R代码。但它们的缺陷在于没有解决数据分布式存储，数据仍然需要在主节点集中表示，分片后再传输给工作节点，不适用于大数据处理的场景。另外，数据处理模型过于简单，即数据分片在工作节点处理后，结果收集回主节点，缺少一个象MapReduce那样通用的分布式数据编程模型。



双方的用户群也有一定的差异。R主要用于学术和研究领域，如今正在快速拓展其企业市场的运用。
Python的使用者，是那些想深入钻研数据分析或者应用统计技术的程序员，以及向数据科学寻求帮护的开发者。用一句话总结：“越接近统计研究跟数据分析人，越倾向R；
越接近工程开发工程环境的人，越倾向Python”。

从实用性来讲，R通过几行代码就可以写出统计模型，尽管R有样式表，但并不是每个人都使用它们，可以用若干种方式写出同样的功能。在Python中写代码和调试代码则更容易一些，主要是因为它的“优美”语法。但是代码的缩进会影响它的意思。并且，在Python中，永远只有一种方式来写同样的功能。
2014 Dice Tech薪金调查显示，具有高薪技能和丰富经验的R使用者的平均工资为115,531美元，而Python则为94,139美元

R的主要应用场景是，当数据分析任务需要独立运算，或者需要在单个服务器上分析；Python的一般应用场景是，数据分析任务需要与网页应用整合，或者当统计代码需要并入成品数据库。
按任务类型划分，做探索性研究时，R语言很适合初学者。几行代码便可写出统计模型；而作为一个完整成熟的程序语言，Python是为产品使用进行算法执行的一个工具。

数据处理能力上，使用R进行数据分析很容易上手，因为它具有庞大数量的包、方便使用的检验以及在使用公式方面的优势。做基本数据分析时，R语言更方便，不需要额外安装包，大的数据库需要使用类似data.table和dplyr包。过去，Python数据分析包的幼年期曾是个问题，但是现在已经得到很大的改善，用Python进行数据分析时，你需要使用NumPy、Pandas和其它的程序包。
如何上手也是比拼的一个方面。R的集成开发环境(IDE)可以选择RStudio。R最受欢迎的程序包有：dply、plyr和data.table（易于操作数据），stringr（易于操作字符串），zoo（处理规则和不规则时间序列），ggvis、lattice和ggplot2（数据可视化），caret（机器学习），建议初学者查看DataCamp上的课程和教程。

Python的集成开发环境(IDE)有很多，其中Spyder和Python Notebook最受欢迎。建议初学者查看Rodeo（被称为“Python到数据科学IDE”）。Python最受欢迎的程序包有：pandas （易于操作数据），SciPy/NumPy（科学计算），sckikit-learn（机器学习），matplotlib（用于作图），statsmodels（数据探索、统计模型估计、统计检验和单元测试）。
有的策略是利用两种语言最好的部分――初始分析在R语言中进行，在需要更严格的分析、团队工作或者发布代码和数据产品时开始转换到Python。有人是用R进行统计检验、画图和检查大数据，必须写算法时，则更倾向于用Python。也有人说，更倾向于在通用语言中做数学计算，而不是用数学语言进行通用编程。

当你开始处理网络级规模的数据时，数据分析的基本方法和过程就都改变了。绝大多数的数据科学家要解决的问题，都无法在单机上完成。他们面对的是需要分布式处理的大型数据集，使用的工具是Hadoop，MapReduce，Apache Spark。



我比较深入的使用过Python和R，给我的感觉有以下几点：
关于R
优点：各类包非常丰富，尤其是在时间序列分析和一些前沿算法
缺点：速度慢
========================
ps：关于R速度慢是有解决办法的，各位客官请看：替换Rblas为R提速
关于Python
优点：工业级编程语言，使用范围广，功能强大，其数据分析的性能由于有numpy with MKL，性能可以达到单机的极限；对于经典算法的实现相对而言比较丰富
缺点：毕竟是一群程序员在写统计软件，多少会有一些覆盖不全面和不直观的地方；前沿算法缺失很厉害；时间序列分析大部分函数都没有成型。
=======================================
一个简单的入门：python计量系列
这里有我用Python做的一个小案例：对sfgg所有博客的数据统计
Python可以提供一整套的数据采集，清洗，分析的工具，然而R仅仅是分析工具
===================================================
写给楼主的忠告，把Python和R都学了吧，Python学起来真的很舒服，用起来也趁手；R嘛，别人都搞不定的时候，就得它上了。

1.单机部署容易度，R略强，R不需要装eclipse了（开个玩笑）。基本差不多，但相对方便，安装库不用自己从网上下载，直接一个install.packages的命令就行，而python要自己找，有的时候很累。

2.文件读取速度，R更强，不知道前几名说R文件速度慢是怎么得来的。亲自测试1gb数据下R的read.csv和python自己写for的readln，python的用时可以让R把这文件再读几百次以上…我一直很少用python的原因就是，经常碰到GB数据，python读取太慢…再说一个R的文件加速行为，R可以把数据在内存的情况存为Rdata的镜像文件，python我不知道怎么加速保存和读取，存csv肯定慢…

3.性能：我觉得R更强，有人说python的numpy速度快，我实际上还是没看出来…那出一个杀招并行怎么弄？R的并行用doParallel就行，python难道要生成exe再自己写n个批处理，生成结果后再读取继续计算？这当中断档和性能损失就不说了…最主要是编程是断档的，累不…

4.易用性：聚类，bp神经网络，基因遗传等等很多算法都直接调用R的库就行，性能好还不用自己写。唯一略弱的应该是类吧，目前用R6来写感觉有时候配上并行包会有问题。

5.发布上：R唯一的缺陷就是不能发布，只能传递脚本，不像python能生成exe…这个可能是编程语言和统计语言的本质区别吧…


ython和R是统计学中两种最流行的的编程语言，R的功能性主要是统计学家在开发时考虑的（R具有强大的可视化功能），而Python因为易于理解的语法被大家所接受。