快速原型开发
PM的Axure
思维导图 

每次只设计和实现这个产品的一部分, 
逐步逐步完成的方法叫迭代开发, 
每次设计和实现一个阶段叫做一个迭代. 
每一次迭代都包括了需求分析、设计、实现与测试。

螺旋模型很大程度上是一种风险驱动的方法体系，因为在每个阶段之前及经常发生的循环之前，都必须首先进行风险评估。


相对于“非敏捷”，更强调程序员团队与业务专家之间的紧密协作、面对面的沟通（认为比书面的文档更有效）、
频繁交付新的软件版本、紧凑而自我组织型的团队、能够很好地适应需求变化的代码编写和团队组织方法，也更注重软件开发中人的作用。

敏捷开发，相比迭代式开发两者都强调在较短的开发周期提交软件，但是，敏捷开发的周期可能更短，并且更加强调队伍中的高度协作。

迭代式开发适合在一些需求信息不明确的项目中，这样在开发过程中遇到需求的变化时，所带来的影响要比瀑布式开发小。
敏捷软件开发是一个开发软件的管理新模式，用来替代以文件驱动开发的瀑布开发模式。
    敏捷开发是多种软件开发项目管理方法的集合,其中包括了XP、Scrum等十几种开发模式,这些开发方法有些共同点,比如重视响应变更,重视实现客户的价值,
    重视开发人员的自身发展等等,其核心体现在他们著名的四句原则中.这些开发方法基本都倾向于采用迭代的软件开发生命周期模型. 
(1)人和交互 重于过程和工具。
  (2)可以工作的软件 重于求全而完备的文档。
  (3)客户协作重于合同谈判。
  (4)随时应对变化重于循规蹈矩。  
       简单来说,迭代模型是敏捷开发普遍使用的软件生命周期模型,敏捷开发所包含的内容比迭代模型宽泛的多.
       
     Scrum注重的是管理和组织实践，而 XP关注的是实际的编程实践。 组合使 用 Scrum和 XP会有显著收获！
       
       区别之一：  迭代长度的不同
XP的一个Sprint的迭代长度大致为1~2周, 而Scrum的迭代长度一般为 2~ 4周.
区别之二: 在迭代中, 是否允许修改需求
XP在一个迭代中，如果一个User Story(用户素材, 也就是一个需求)还没有实现， 则可以考虑用另外的需求将其替换， 替换的原则是需求实现的时间量是相等的。 而Scrum是不允许这样做的，一旦迭代开工会完毕, 任何需求都不允许添加进来，并有Scrum Master严格把关，不允许开发团队收到干扰
区别之三: 在迭代中，User Story是否严格按照优先级别来实现
XP是务必要遵守优先级别的。 但Scrum在这点做得很灵活， 可以不按照优先级别来做
区别之四:软件的实施过程中，是否采用严格的工程方法，保证进度或者质量
Scrum没有对软件的整个实施过程开出工程实践的处方。要求开发者自觉保证，但XP对整个流程方法定义非常严格，规定需要采用TDD, 自动测试， 结对编程，简单设计，重构等约束团队的行为。
这四个区别显见的是： Scrum非常突出Self-Orgnization, XP注重强有力的工程实践约束
在管理模式上启用Scrum， 而在实践中，创造一个适合自己项目组的XP
 
首先，理解Scrum时有两点需要时刻谨记：
1、Scrum只是一个框架，不是具体的方法或流程；
2、Scrum是在保证质量的前提下追求敏捷，绝非为了敏捷而敏捷。
 
 时间：scrum把时间分成一个个的sprint，也就是迭代周期。这个周期以2-6个星期为宜，但目前使用的最多的，是一个月，即四个星期。
        每一个sprint的开始和结束都会有一个会议，叫做sprint计划和sprint演示
 组成sprint的每天中，都会有每日例会，叫做每日站会，所以谓站会
 scrum中有scrum master, product owner和scrum团队。我理解scrum master就是project manager，而product owner就是product manager，团队还是那个团队，只是这里的团队，
 在规模上有一定的限制，它要求人员不要太多，不要太少，3-12个，通常4人团队比较多见，当然这个具体还得看实际情况来定。团队中开发测试人员比是1：1，即pair work。
 scrum中的需求，采用story的形式进行描述，整个产品的需求，被列成product backlog，而每一个迭代周期要做什么，是在每个sprint的计划会议上进行挑选的，根据po对backlog标记的优先级，团队对其进行estimate并挑选出这个sprint里能完成的story，scrum master把它们列入计划中。
  backlog有一个用于统计的东西，叫做燃尽图。从字面理解，就是燃烧掉多少的图，即sprint backlog中的被完成了多少，每完成一个story，就燃烧掉一个story。产品backlog有产品燃尽图，sprint有sprint燃尽图。       

产品 backlog是 Scrum的核心，也是一切的起源。从根本上说，它 就是一个需求、或故事、或特性等组成的列表，按照重要性的级别 进行了排序。它里面包含的是客户想要的东西，并用客户的术语加 以描述。

Sprint 计划会议有一个产物常常被人们忽略：“确定的时间和地点， 以供举办每日例会”。没有这一点，你的 sprint就会有个“开门黑”。 实际上，每个人都是在当前 sprint的第一个每日例会上决定怎样开 始工作
此外， Scrum master还会把 sprint信息页打印出来，贴到团队房间 外面的墙上。路过的每个人都可以阅读这张纸，了解这个团队所做 的事情。因为其中还包括了每日例会的时间地点，所
“设计墙”只是一块大白板，上面画着最重要的设计草图，还有打 印出来的、最重要的设计文档（顺序图，GUI原型，领域模型等等）
“一起”意味着： ? 互相听到：所有人都可以彼此交谈，不必大声喊，不必离 开座位。 ? 互相看到：所有人都可以看到彼此，都能看到任务板―― 不用非得近到可以看清楚内容，但至少可以看到个大概。 ? 隔离：如果你们整个团队突然站起来，自发形成一个激烈
 让演示关注于业务层次，不要管技术细节。注意力放在“我 们做了什么”，而不是“我们怎么做的”。
 结对编程可以增进团队间的知识传播。速度快到令人难以 想象。
 “实验日”（你爱叫什么都行）算是一种方式。在这样的日子里， 开发人员基本上可以做任何他想做的事情（OK，我承认这种想法 是从 Google来的）。比如研习最新的工具和 API、准备认证、跟 同事讨论乱七八糟的事情、开发自己喜欢的项目，等等。
 我们在测试驱动开发中使用了如下工具： jUnit / httpUnit / jWebUnit。我们正在考虑使用 TestNG和 Selenium.
 很多有关敏捷软件开发的书都声称：加班工作在软件开发中会降低 生产率。 经过几次不情愿的试验之后，我完全拥护这种说法！
 我的经验是，宁可团队数量少，人数多，也比弄上一大堆总在互相 干扰的小团队强。要想拆分小团队，必须确保他们彼此之间不会产 生互相干扰！