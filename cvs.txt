tag，是用来做一个milestone的，不管是不是release，都是一个可用的版本。这里，应该是只读的。更多的是一个显示用的，给人一个可读（readable）的标记。
branch，是用来做并行开发的，这里的并行是指和trunk进行比较。


20110409 备份 QA team相关人员home目录
193.178 /nptest/homebackup

oracle@bjnpmdf2:/nptest/homebackup> mv fengyi.tgz x1.tgz
oracle@bjnpmdf2:/nptest/homebackup> mv weirj.tgz  x2.tgz
oracle@bjnpmdf2:/nptest/homebackup> mv hewei.tgz  x3.tgz
oracle@bjnpmdf2:/nptest/homebackup> mv wangdq.tgz  x4.tgz
oracle@bjnpmdf2:/nptest/homebackup> mv sutx.tgz  x5.tgz
oracle@bjnpmdf2:/nptest/homebackup> mv chencheng.tgz  x6.tgz
cvs -d /home/cvsroot/document  init

export CVSROOT=:pserver:cvsroot@192.168.129.247:/home/cvsroot/NPFO/BlackSwan
export CVSROOT=:pserver:yuzq@192.168.193.132:/home/cvsroot/fmit

export CVSROOT=:pserver:guanyy:guanyy@192.168.160.73:/home/cvsroot/rds
export CVSROOT=:pserver:wanzy:wzykknd@192.168.160.71:/home/cvsroot/rds


export CVSROOT=:pserver:hedejia@192.168.74.210:/home/cvsroot/NPFO/HKBSS
export CVSROOT=:pserver:document:document@192.168.193.132:/home/cvsroot/document


export CVSROOT=:pserver:wangchunmiao:abc123@192.168.160.73:2401/home/cvsroot/NPFO/HKBSS 


132 root Salvage,7207 
192.168.74.210 root Alex3714  new cvs server 

密码 roger/Roger
guanyy/guanyan_yan
yuzq/yuzhi_qiang 
Passw0rd!

安装
./configure --prefix=/ciccdev/cvs 
make 
make install
初始化
cvs -d /ciccdev/cvs/cvsroot init
配置 
    * 检查 /etc/services
      首先键入 vi /etc/services
      然后键入 /cvspserver
      如果找到的行前面并没有#，那么就不用修改了，否则去掉行首的#

    * 在 /etc/xinetd.d 目录下创建一个文件，随便命名，比如 cvs
      vi /etc/xinetd.d/cvs
      在其中添上
      引用:

    service cvspserver
{
        disable         = yes
        socket_type     = stream
        protocol        = tcp
        wait            = no
        user            = root
        server          = /usr/bin/cvs
        server_args     = -f --allow-root=/ciccdev/cvs/cvsroot pserver
}
   * 保存以后创建一个名为 cvs 的组和一个名为 cvsroot 的用户
      groupadd cvs
      useradd -g cvs -s /sbin/nologin cvsroot
    * 然后
      vi /etc/profile
      在其中添上
      export CVSROOT = /home/cvsroot
    * 重启 xinetd:
      /etc/init.d/xinetd restart

彻底禁止系统用户登录
CVSROOT/config
把SystemAuth=no前面注释放开
CVSROOT下面的readers和writers两个文件控制读写权限,readers优先级高

添加用户
htpasswd2 -cb passtmp user 111112
在passtmp找到加密后的密码，然后用其替换password的密码

cd CVSROOT 
password
steven:xxxxx:cvsroot 
用pl生成的密码替换xxxx

设置CVSROOT变量
export CVSROOT=:pserver:cvsroot@192.168.193.136:/home/cvsroot/ITI
export CVSROOT=:pserver:cvsroot@192.168.193.136:/home/cvsroot/NP_release
导入目录
cd project 

cvs import -m "test sources"    wzy test
cvs status -v file 可以看到很多信息

cvs commit -m " comments here 1" test/w.txt 

打tag 
cvs tag tag_1_4  test/w.txt    

cvs控制权限只能做到目录级

如果需要保存二进制文件，需要加上-kb选项
取消系统授权
D:\cvsroot\CVSROOT\config 

SystemAuth=no


密码授权
D:\cvsroot\CVSROOT\passwd
readers




如果不修改以上的错误，就会在cvs login的时候出现：cvs [login aborted]: unrecognized auth response from localhost: Usage: cvs [cvs-options] command [command-options-and-arguments] 这样的错误提示。 


使用提示：
# 添加仓库: 进入到你的源码目录
cd /your/sources/path
然后执行
cvs export SOURCE_DIR_NAME Author Version
其中的SOURCE_DIR_NAME 就是你的工程在 CVSROOT 目录中保存的目录名, Author 为工程作者， Version 为你的工程发行版本号，必须以字母开头

# 添加匿名只读用户:
useradd -g cvs -M -s /sbin/nologin anonymous
chmod 644 /home/cvsroot/CVSROOT/passwd
echo "anonymous::anonymous" >> /home/cvsroot/CVSROOT/passwd
chmod 444 /home/cvsroot/CVSROOT/passwd
echo "anonymous" >> /home/cvsroot/CVSROOT/readers
chmod 444 /home/cvsroot/readers

# 防止CVSROOT被下载:
chmod 644 /home/cvsroot/CVSROOT/modules
echo "CVSROOT -a" >> /home/cvsroot/CVSROOT/modules
chmod 444 /home/cvsroot/CVSROOT/modules

# 不使用 real system user 登陆:
chmod 644 $CVSROOT/CVSROOT/config
vi $CVSROOT/CVSROOT/config
将第二行的
#SystemAuth = no
去掉注释，即改为
SystemAuth = no 

首先安装jb或者wincvs

（如果命令行使用
设置环境变量 :pserver:tpread@10.1.1.70:/tpdata/cvsroot
登陆cvs服务器
cvs login

cvs checkout tplife
）


CVS的日常使用 
============= 

确认修改：确认自己的修改并写入到CVS库里 
cvs commit -m "write some comments here" file_name 

注意：CVS的很多动作都是通过cvs commit进行最后确认并修改的，在确认的前，
还需要用户填写修改注释，以帮助其他开发人员了解修改的原因。
如果不用写-m "comments"而直接确认`cvs commit file_name` 的话，cvs会自动调用系统缺省的文字编辑器(一般是vi)要求你写入注释。 
注释的质量很重要：所以不仅必须要写，而且必须写一些比较有意义的内容：以方便其他开发人员能够很好的理解 
不好的注释，很难让其他的开发人员快速的理解：比如： -m "bug fixed" 甚至 -m "" 
好的注释，甚至可以用中文: -m "在用户注册过程中加入了Email地址校验" 

同步最近修改：开始工作前和将自己的工作导入到CVS库里前都要做一次：先同步 后修改 
cvs update -m "write some comments here" file_name 

注意：项目首次导出后，以后就要用cvs update在导出的项目目录下进行同步了，
而不是每次重新cvs checkout来同步文件了。如果导出后修改了文件，
然后再次从导出的项目目录的上一级cvs checkout proj等于是删除了proj目录然后重新导出，
上次导出后的修改就全丢了。 

修改某个版本注释：每次只确认一个文件到CVS库里是一个很好的习惯，但难免有时候忘了指定文件名，
把多个文件以同样注释commit到CVS库里了，以下命令可以允许你修改某个文件某个版本的注释： 
cvs admin -m 1.3:"write some comments here" file_name 

删除文件：文件删除后，比如：rm file_name 
cvs rm file_name 
cvs ci -m "write some comments here" 

注意：很多cvs命令都有缩写形式：commit=>ci update=>up checkout=>co remove=>rm 

添加文件 文件添加后，比如：touch new_file 
cvs add new_file 
cvs ci -m "write some comments here" 

添加目录： 
cvs add dir_name 

查看修改历史：cvs log file_name 
cvs history file_name 

查看当前文件不同版本的区别 
cvs diff -r1.3 -r1.5 file_name 
查看当前文件（可能已经修改了）和库中相应文件的区别 
cvs diff file_name 

更方便的定位文件修改和比较版本区别的办法请看后面的cvsweb使用 

正确的通过CVS恢复旧版本的方法： 
如果用cvs update -r1.2 file.name 
这个命令是给file.name加一个STICK TAG： "1.2" ，虽然你的本意只是想将它恢复到1.2版本 
正确的恢复版本的方法是：cvs update -p -r1.2 file_name >file_name 
如果不小心已经加成STICK TAG的话：用cvs update -A 解决 

