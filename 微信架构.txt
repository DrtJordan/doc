微信架构

敏捷开发，一天能做20个发布(业界一般5个)
有损服务就是让重要的事情先做，重要的人物先行。这在现实中也很常见
灰度发布 A/B两个版本同时运行，逐步全替换成B
异步分拆 异步队列进行处理
接入层面也会进行自我保护，针对频繁发出请求的客户端限制响应速度

同步协议有一个很重要的基石叫序列发生器，这样的一个序列发生器需要有极高的稳定度。首先可以看到序列号有一个特点永远是递增的，用递增方式往前推进的时候，最大的序列号就是最新的系列号
前轻后重 功能点后移
分而治之 把监控嵌入基础框架

大系统小做应该来说，是一种意识，他的核心思想是将功能复杂较大的系统，化大为小，减少模块耦合，降低关联性，
用多个独立的模块来实现整体系统的功能，大系统小做采用的是化繁为简，分而治之，便于开发和迅速实现。
 
大系统小做：当设计庞大系统的时候，应该尽量分割成更小的颗粒，使得项目之间的影响是最小的。
一切可扩展：在高稳定度、高性能的系统中间，为了稳定性能把它设计成不变化的系统，但为了支持敏捷需要让一切的东西都要变得可以扩展。
必须建立基础组件：要解决复杂问题的时候，需要将已有的经验固化下来，固化下来的东西会成为系统中的一部分。
轻松上线：当做了变化并把它从开发环境中部署到现有的运营环境中去，在这个过程中，“灰度”这个词非常关键，就是在黑和白之间的选择，必须要变成一种小规模尝试，再逐步扩展到海量过程中的一个问题。

数据存储方面是必须可扩展的。在2005年绝大多数海量系统的设计都是采用固定字段的存储，但是在现代系统中会意识到这个问题，会采用KV或者TLV的方式，微信也做了不同的设计。

简化了交互模式，状态同步可以通过状态同步的差值获得最小的数据变更，通过增量的传输得到最小的数据传输量。通过这样的协议设计，微信可以确保消息是稳定到达的，而且是按序到达。引用一句俗话：比它炫的没它简单，比它简单的没它快，没谁比他更快，哪怕在GPRS下，微信也能把进度条轻易推到底。

柔性可用，在任何的系统中不要追求完美设计，追求完美设计的是团队是不能胜任海量服务的 服务端系统通常不是0与1之间的选择，可以在极端情况下做一定优雅降级，在服务端代码中需要体现这些设计。
要精确定位出哪一个环节是最为重要的，把不是重要的错误尽可能的忽略掉。

接入层、逻辑层、存储层。接入层和逻辑层的容灾都有比较成熟的方案。逻辑层的容灾相对来说比较简单，尽量不要有状态的设计，比如说当你做上一个请求的时候，会保持一些状态，要使得下一个请求发到下一个服务器。如果任何一个请求之间互相不关联的话，这个就是无状态的设计，只要做到这一点逻辑层的容灾可以随意的切换。在回到存储层本身的容灾设计上，相对来说困难一些，但是微信研发团队采用了一些技巧，叫分而治之，分离业务场景，寻求简单的设计，并不会寻求大而同一的解决方案，

极致的业务特性
- 流畅的消息收发 - 及时的通知 - 省电 - 省流量 - 瘦客户端
就近访问
就近访问IDC - 就近网络接入
CDN：上传下载图片 - 腾讯自建CDN - AKAMAI
困难的后台-终端同步

- 后台与终端只需要沟通一个数字，后台即可知道终端缺失的所有数据。 - 变更序列号/版本号： - 后台对用户数据的每项变更，都赋予一个单调递增的序列号，即用户的每项数据都有一个全局递增序列号。 - 后台每次给终端发送数据都会带上所发送的所有数据的最大序列号。
 - 终端每次请求数据时都会带上已经接受到的最大序列号。
 根据ProtocolBuffer定义生成服务器框架和客户端 - 服务器：
 
 
 个人觉得xmpp 可以玩玩（参考看这个 RFC3920和RFC3921   ）， 但是用来真正的产品就差远了。如果遇到一个做IM 的朋友张口闭口都说xmpp 的话，那么不用沟通了，肯定不是什么好产品。微信、QQ以前也曾用过xmpp，但是最后也放弃了xmpp，就知道xmpp有很多弊端了，还有就是报文太大，好臃肿，浪费流量。为了保证稳定，微信用了长链接和短链接相结合，例如：
 微信划分了http模式（short链接）和 tcp 模式（long 链接），分别应对状态协议和数据传输协议
 
 
  short.weixin.qq.com  
 是HTTP协议扩展，运行8080 端口，http body为二进制（protobuf）。
 主要用途（接口）：
用户登录验证;
好友关系（获取，添加）；
消息sync (newsync)，自有sync机制；
获取用户图像；
用户注销；
行为日志上报。
朋友圈发表刷新
 2.2  long.weixin.qq.com  
  tcp 长连接， 端口为8080，类似微软activesync的二进制协议。
 主要用途（接口）：
接受/发送文本消息；
接受/发送语音；
接受/发送图片；
接受/发送视频文件等。
 
 所有上面请求都是基于tcp长连接。在发送图片和视频文件等时，分为两个请求；第一个请求是缩略图的方式，第二个请求是全数据的方式
 
 2.2.1 数据报文方面
增量上传策略：
每次8k左右大小数据上传，服务器确认；在继续传输。
 
图片上传：
先传缩略图，传文本消息，再传具体文件
 
下载：
先下载缩略图， 在下载原图
下载的时候，全部一次推送。