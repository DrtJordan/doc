gradle使用 groovy语言(java 变种)
Gradle支持以下仓库格式：

Ivy仓库
Maven仓库
Flat directory仓库


Gradle 里的任何东西都是基于这两个基础概念:

projects ( 项目 )
tasks ( 任务 )
每一个构建都是由一个或多个 projects 构成的. 一个 project 到底代表什么依赖于你想用 Gradle 做什么. 举个例子, 一个 project 可以代表一个 JAR 或者一个网页应用. 它也可能代表一个发布的 ZIP 压缩包, 这个 ZIP 可能是由许多其他项目的 JARs 构成的. 但是一个 project 不一定非要代表被构建的某个东西. 它可以代表一件**要做的事, 比如部署你的应用.

每一个 project 是由一个或多个 tasks 构成的. 一个 task 代表一些更加细化的构建. 可能是编译一些 classes, 创建一个 JAR, 生成 javadoc, 或者生成某个目录的压缩文件.

gradle 命令会在当前目录中查找一个叫 build.gradle 的文件. 我们称这个 build.gradle 文件为一个构建脚本 (build script), 但是严格来说它是一个构建配置脚本 (build configuration script). 这个脚本定义了一个 project 和它的 tasks.

build.gradle

task hello {
    doLast {
        println 'Hello world!'
    }
}
或者用这种方式定义
task hello << {
    println 'Hello world!'
}

运行
gradle -q hello 
当你运行 gradle hello, Gradle 执行叫做 hello 的 task, 也就是执行了你所提供的 action. 这个 action 是一个包含了一些 Groovy 代码的闭包(closure 这个概念不清楚的同学好好谷歌下).
 Gradle tasks 和 Ant 的 targets 是对等的
 
 任务依赖
 task hello << {
    println 'Hello world!'
}

task intro(dependsOn: hello) << {
    println "I'm Gradle"
}
gradle -q intro
Hello world!
I'm Gradle
intro 依赖于 hello, 所以执行 intro 的时候 hello 命令会被优先执行来作为启动 intro 任务的条件

Gradle 希望能在 src/main/java 找到你的源代码, 在 src/test/java 找到你的测试代码, 也就是说 Gradle 默认地在这些路径里查找资源. 另外, 任何在 src/main/resources 的文件都将被包含在 JAR 文件里, 同时任何在 src/test/resources 的文件会被加入到 classpath 中以运行测试代码. 所有的输出文件将会被创建在构建目录里, JAR 文件存放在 build/libs 文件夹里.

当你运行 gradle build 命令时, Gradle 将会编译和测试你的代码, 并且创建一个包含类和资源的 JAR 文件
